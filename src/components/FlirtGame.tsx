import React, { useState, useEffect, useRef } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import { useAppLogging } from '../hooks/useAppLogging';
import { useFirestore } from '../hooks/useFirestore';
import type { GameResult } from '../types/models';
import WelcomeScreen from './WelcomeScreen';
import StyledMessage from './StyledMessage';
import StyledOptionButton from './StyledOptionButton';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
type Option = {
  text: string;
  emoji?: string;
  response: {
    text: string;
    type: 'good' | 'bad' | 'neutral';
    score?: number;
  };
};

type Stage = {
  id: string;
  message: string;
  options: Option[];
  nextStage?: string;
};

type GameScenario = {
  stages: { [key: string]: Stage };
  initialStage: string;
  finalStage: string;
};

// –ò–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
const gameScenario: GameScenario = {
  stages: {
    welcome: {
      id: 'welcome',
      message: '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Ellie. –£—á—É –ø–∞—Ä–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å üòò\n–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?',
      options: [
        {
          text: '–ù–∞—á–∞—Ç—å',
          response: {
            text: '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —É—Ä–æ–∫—É —Ñ–ª–∏—Ä—Ç–∞ üòè',
            type: 'good'
          }
        },
        {
          text: '–ù–µ —Å–µ–π—á–∞—Å',
          response: {
            text: '–ù—É —á—Ç–æ –∂, –±—É–¥—É –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ —Ä–µ—à–∏—à—å—Å—è üòâ',
            type: 'neutral'
          }
        }
      ],
      nextStage: 'stage1'
    },
    stage1: {
      id: 'stage1',
      message: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —è —Å—Ç–æ—é —É –±–∞—Ä–∞. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å –ø–µ—Ä–≤—ã–º?',
      options: [
        {
          text: '–ü—Ä–∏–≤–µ—Ç, –º–æ–∂–Ω–æ —É–≥–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è —á–µ–º-—Ç–æ?',
          emoji: 'üç∏',
          response: {
            text: '–ö–ª–∞—Å—Å–∏–∫–∞! –°–∫—Ä–æ–º–Ω–æ, –Ω–æ —Å–æ –≤–∫—É—Å–æ–º üç∏ 7/10',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –æ–ø–∞—Å–Ω–æ –∫—Ä–∞—Å–∏–≤–æ‚Ä¶',
          emoji: 'üî•',
          response: {
            text: '–û-–æ-–æ, –¥–µ—Ä–∑–∫–∏–π üòè –ê —á—Ç–æ –¥–∞–ª—å—à–µ?',
            type: 'good',
            score: 8
          }
        },
        {
          text: '–ù—É –ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞, –∫–∏—Å–∫–∞?',
          emoji: 'üò∫',
          response: {
            text: '–ö–∏—Å–∫–∞?.. –°–µ—Ä—å—ë–∑–Ω–æ? üôÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë üòÖ',
            type: 'bad',
            score: 3
          }
        }
      ],
      nextStage: 'stage2'
    },
    stage2: {
      id: 'stage2',
      message: '–û–∫–µ–π, —Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –º–µ–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. –ö—É–¥–∞ –≤–µ–¥—ë—à—å?',
      options: [
        {
          text: '–í —É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥',
          emoji: 'üåÜ',
          response: {
            text: '–†–æ–º–∞–Ω—Ç–∏–∫–∞ üòç –ê —Ç—ã –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç, –∫–∞–∫ –∫–∞–∂–µ—à—å—Å—è‚Ä¶',
            type: 'good',
            score: 8
          }
        },
        {
          text: '–í –∫–∞—Ä–∞–æ–∫–µ ‚Äî —Ä–∞–∑–æ—Ä–≤—ë–º –∑–∞–ª!',
          emoji: 'üé§',
          response: {
            text: '–û–±–æ–∂–∞—é —Å–º–µ–ª—ã—Ö! –ù–∞–¥–µ—é—Å—å, –ø–æ—ë—à—å –ª—É—á—à–µ, —á–µ–º –ø–∏—à–µ—à—å üòÑ',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–ö–æ –º–Ω–µ‚Ä¶ —Å–º–æ—Ç—Ä–µ—Ç—å Netflix üòâ',
          emoji: 'üì∫',
          response: {
            text: '–û—Ö, –º—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏, –∞ —Ç—ã —É–∂–µ —Å–ø–µ—à–∏—à—å üòâ',
            type: 'bad',
            score: 4
          }
        }
      ],
      nextStage: 'stage3'
    },
    stage3: {
      id: 'stage3',
      message: '–°–º–æ—Ç—Ä–∏, —è –¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –∑–∞–Ω—è—Ç–∞. –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—ë—à—å –º–æ—ë –≤–Ω–∏–º–∞–Ω–∏–µ?',
      options: [
        {
          text: '–£–ª—ã–±–Ω—É—Å—å –∏ –ø–æ–¥–æ–π–¥—É ‚Äî –ø—Ä–æ—Å—Ç–æ',
          emoji: 'üòä',
          response: {
            text: '–•–º–º, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ! –ù–æ —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ. 6/10',
            type: 'neutral',
            score: 6
          }
        },
        {
          text: '–°–¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ —Ç–æ–∂–µ –Ω–µ –∑–∞–º–µ—á–∞—é',
          emoji: 'üôà',
          response: {
            text: '–ò–≥—Ä–∞–µ—à—å –≤ –Ω–µ–¥–æ—Ç—Ä–æ–≥—É? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞! 7/10',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–ù–∞–ø–∏—à—É "—Ç—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞" –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É',
          emoji: '‚úèÔ∏è',
          response: {
            text: '–í–∞—É, —ç—Ç–æ –º–∏–ª–æ üòç –¢—ã —É–º–µ–µ—à—å —É–¥–∏–≤–∏—Ç—å! 9/10',
            type: 'good',
            score: 9
          }
        }
      ],
      nextStage: 'final'
    },
    final: {
      id: 'final',
      message: '–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ —Ñ–ª–∏—Ä—Ç–∞. –ü–æ—Ä–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏! üíã\n\n –í—Ä–µ–º—è –∏–¥—Ç–∏ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏!',
      options: [],
      nextStage: ''
    }
  },
  initialStage: 'welcome',
  finalStage: 'final'
};

const FlirtGame: React.FC = () => {
  const [showChat, setShowChat] = useState(false);
  const [currentStage, setCurrentStage] = useState<string>(gameScenario.initialStage);
  const [messages, setMessages] = useState<Array<{ text: string; sender: 'ellie' | 'system'; }>>([
    { text: gameScenario.stages[gameScenario.initialStage].message, sender: 'ellie' }
  ]);
  const [totalScore, setTotalScore] = useState<number>(0);
  const [showNextButton, setShowNextButton] = useState<boolean>(false);
  const [gameFinished, setGameFinished] = useState<boolean>(false);
  const [gameResults, setGameResults] = useState<{ [key: string]: { selectedOptionText: string; score: number } }>({});
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { tg, user } = useTelegram();
  const { logUserAction } = useAppLogging();
  const { addDocument, loading, error } = useFirestore();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–∂–µ –≤–∏–¥–Ω—ã
    const chatElement = document.querySelector('.messages-container');
    if (chatElement && messages.length > 1) {
      // –ü–æ–∑–≤–æ–ª—è–µ–º –≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      setTimeout(() => {
        chatElement.scrollTop = chatElement.scrollHeight - chatElement.clientHeight * 0.9;
      }, 100);
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ –Ω–∞—á–∞–ª—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  useEffect(() => {
    if (!showNextButton && !gameFinished && gameScenario.stages[currentStage].options.length > 0) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç, —á—Ç–æ–±—ã –±—ã–ª–∏ –≤–∏–¥–Ω—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
      const chatElement = document.querySelector('.messages-container');
      if (chatElement) {
        // –£–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        // –±—ã–ª–æ: chatElement.scrollTop = chatElement.scrollHeight - 400;
        chatElement.scrollTop = chatElement.scrollHeight - chatElement.clientHeight + 100;
      }
    }
  }, [currentStage, showNextButton, gameFinished]);
  
  useEffect(() => {
    if (currentStage === gameScenario.finalStage) {
      // Set a timeout to automatically show the final button after the message is displayed
      setTimeout(() => {
        setGameFinished(true);
      }, 1000);
    }
  }, [currentStage]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ–∫–Ω–∞ Telegram –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
  useEffect(() => {
    if (showChat && tg) {
      // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ Telegram WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      tg.expand();
    }
  }, [showChat, tg]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
  useEffect(() => {
    if (showChat) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å UI –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
      setTimeout(() => {
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –≤–∏–¥–Ω—ã, –Ω–æ –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–∞—Å—å –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        const chatElement = document.querySelector('.messages-container');
        if (chatElement) {
          // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–∫—Ä–æ–ª–ª —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –±—ã–ª–∏ –≤–∏–¥–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          chatElement.scrollTop = chatElement.scrollHeight - chatElement.clientHeight * 0.7;
        }
      }, 100);
    }
  }, [showChat]);

  const handleOptionSelected = (option: Option) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logUserAction('option_selected', { 
      option: option.text, 
      stage: currentStage,
      score: option.response.score || 0 
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –æ—Ü–µ–Ω–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä—ã
    setGameResults(prev => ({
      ...prev,
      [currentStage]: {
        selectedOptionText: option.text,
        score: option.response.score || 0
      }
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    setMessages(prevMessages => [
      ...prevMessages,
      { text: option.text, sender: 'system' }
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
    if (option.response.score !== undefined) {
      setTotalScore(prevScore => prevScore + option.response.score!);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Ellie –≤ —á–∞—Ç
    setTimeout(() => {
      setMessages(prevMessages => [
        ...prevMessages,
        { text: option.response.text, sender: 'ellie' }
      ]);

      setShowNextButton(true);
    }, 1000);
  };

  const handleNextStage = () => {
    setShowNextButton(false);
    
    const currentStageData = gameScenario.stages[currentStage];
    const nextStageId = currentStageData.nextStage;
    
    if (nextStageId && gameScenario.stages[nextStageId]) {
      setCurrentStage(nextStageId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
      setTimeout(() => {
        setMessages(prevMessages => [
          ...prevMessages,
          { text: gameScenario.stages[nextStageId].message, sender: 'ellie' }
        ]);
      }, 500);
    } else if (currentStage !== gameScenario.finalStage) {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞, –Ω–æ –º—ã –µ—â—ë –Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º
      setCurrentStage(gameScenario.finalStage);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setTimeout(() => {
        setMessages(prevMessages => [
          ...prevMessages,
          { text: gameScenario.stages[gameScenario.finalStage].message, sender: 'ellie' }
        ]);
      }, 500);
    }
  };

  const handleOfferClick = () => {
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ñ—Ñ–µ—Ä–∞
    logUserAction('offer_click', { totalScore }).catch(console.error);
    
    if (tg) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ–π—Ç–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å—É
      tg.openLink('https://example.com/dating');
    }
  };

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–º–∞–∫—Å–∏–º—É–º 30 –æ—á–∫–æ–≤)
  const maxScore = 30;
  const progress = Math.min((totalScore / maxScore) * 100, 100);

  const handleStartChat = () => {
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —á–∞—Ç–∞
    logUserAction('start_chat').catch(console.error);
    
    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
    setShowChat(true);
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ Firestore –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  useEffect(() => {
    if (currentStage === gameScenario.finalStage && !loading && user) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
      const getDeviceInfo = () => {
        const country = navigator.language || 'unknown';
        let device = 'unknown';
        const ua = navigator.userAgent.toLowerCase();
        
        if (ua.includes('iphone') || ua.includes('ipad') || ua.includes('ipod')) {
          device = 'iOS';
        } else if (ua.includes('android')) {
          device = 'Android';
        } else if (ua.includes('windows')) {
          device = 'Windows';
        } else if (ua.includes('macintosh') || ua.includes('mac os')) {
          device = 'Mac';
        } else if (ua.includes('linux')) {
          device = 'Linux';
        }
        
        return {
          country,
          device,
          platform: navigator.platform
        };
      };

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã
      const gameResultData: GameResult = {
        userId: user.id,
        username: user.username,
        totalScore,
        stages: gameResults,
        deviceInfo: getDeviceInfo()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Firestore
      addDocument('gameResults', gameResultData)
        .then(docId => {
          if (docId) {
            console.log('Game results saved to Firestore with ID:', docId);
            logUserAction('game_completed', { docId, totalScore });
          }
        })
        .catch(err => {
          console.error('Error saving game results:', err);
          logUserAction('error_saving_results', { error: err.message });
        });
    }
  }, [currentStage, loading, user, totalScore, gameResults, addDocument, logUserAction]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É Firestore, –µ—Å–ª–∏ –µ—Å—Ç—å
  useEffect(() => {
    if (error) {
      console.error('Firestore error:', error);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  }, [error]);

  if (!showChat) {
    return <WelcomeScreen onStart={handleStartChat} />;
  }

  return (
    <div className="flex flex-col h-[100dvh] w-full relative overflow-hidden flex-shrink-0 flex-grow-0">
      {/* –ó–∞–±–ª—é—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω */}
      <div 
        className="absolute inset-0 bg-black/85 backdrop-blur-xl z-0"
      />
      
      {/* –®–∞–ø–∫–∞ —Å Ellie */}
      <div 
        className="bg-[rgba(30,30,40,0.8)] backdrop-blur-md p-3 flex items-center border-b border-white/10 fixed top-0 left-0 right-0 z-30 flex-shrink-0"
      >
        <div 
          className="flex items-center gap-2"
        >
          <div 
            className="w-8 h-8 rounded-full border border-white/20 bg-cover bg-center"
            style={{backgroundImage: 'url(/images/ellie.png)'}}
          />
          <div>
            <div 
              className="font-bold text-white text-sm flex items-center gap-1"
            >
              Ellie <span className="text-pink-300 text-xs"></span>
            </div>
            <div 
              className="text-[10px] text-white/60 flex items-center gap-1"
            >
              <span 
                className="w-1.5 h-1.5 bg-green-400 rounded-full inline-block"
              ></span>
              –û–Ω–ª–∞–π–Ω
            </div>
          </div>
        </div>
        
        <div 
          className="ml-auto text-white flex items-center gap-2"
        >
          <div 
            className="text-[10px] text-white"
          >
            –û—á–∫–∏: {totalScore}/{maxScore}
          </div>
          <div
            className="w-10 h-1 bg-white/20 rounded-sm overflow-hidden"
          >
            <div
              className="h-full bg-gradient-to-r from-indigo-600 to-purple-500"
              style={{width: `${progress}%`}}
            ></div>
          </div>
        </div>
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div 
        className="flex-1 overflow-y-auto p-3 relative z-10 pt-16 messages-container"
        style={{ 
          maxHeight: 'calc(100vh - 130px)',
          height: 'auto',
          overflowY: 'auto',
          display: 'flex',
          flexDirection: 'column'
        }}
      >
        <div className="pb-20 flex-grow overflow-y-visible">
          {messages.map((msg, index) => (
            <StyledMessage
              key={index}
              text={msg.text}
              sender={msg.sender}
              animate={index === messages.length - 1}
            />
          ))}
          <div ref={messagesEndRef} className="h-10" />
        </div>
      </div>
      
      {/* –ù–∏–∂–Ω–∏–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <div 
        className="bg-[rgba(30,30,40,0.9)] backdrop-blur-md p-4 pb-6 border-t border-white/10 fixed bottom-0 left-0 right-0 z-30 flex-shrink-0 shadow-[0_-4px_6px_rgba(0,0,0,0.1)]"
      >
        {showNextButton ? (
          <button
            onClick={handleNextStage}
            className="w-full py-3.5 bg-gradient-to-r from-indigo-600 to-purple-500 text-white border-none rounded-xl text-sm font-bold cursor-pointer shadow-lg transition-all duration-200"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </button>
        ) : gameFinished ? (
          <button
            onClick={handleOfferClick}
            className="w-full py-3.5 bg-gradient-to-r from-indigo-600 to-purple-500 text-white border-none rounded-xl text-sm font-bold cursor-pointer shadow-lg transition-all duration-200"
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
          </button>
        ) : (
          <div className="space-y-1">
            {gameScenario.stages[currentStage].options.map((option, index) => (
              <StyledOptionButton
                key={index}
                text={option.text}
                emoji={option.emoji}
                onClick={() => handleOptionSelected(option)}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default FlirtGame; 