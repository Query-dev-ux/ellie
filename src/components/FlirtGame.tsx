import React, { useState, useEffect, useRef } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import WelcomeScreen from './WelcomeScreen';
import StyledMessage from './StyledMessage';
import StyledOptionButton from './StyledOptionButton';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
type Option = {
  text: string;
  emoji?: string;
  response: {
    text: string;
    type: 'good' | 'bad' | 'neutral';
    score?: number;
  };
};

type Stage = {
  id: string;
  message: string;
  options: Option[];
  nextStage?: string;
};

type GameScenario = {
  stages: { [key: string]: Stage };
  initialStage: string;
  finalStage: string;
};

// –ò–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
const gameScenario: GameScenario = {
  stages: {
    welcome: {
      id: 'welcome',
      message: '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Ellie. –£—á—É –ø–∞—Ä–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å üòò\n–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?',
      options: [
        {
          text: '–ù–∞—á–∞—Ç—å',
          response: {
            text: '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —É—Ä–æ–∫—É —Ñ–ª–∏—Ä—Ç–∞ üòè',
            type: 'good'
          }
        },
        {
          text: '–ù–µ —Å–µ–π—á–∞—Å',
          response: {
            text: '–ù—É —á—Ç–æ –∂, –±—É–¥—É –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ —Ä–µ—à–∏—à—å—Å—è üòâ',
            type: 'neutral'
          }
        }
      ],
      nextStage: 'stage1'
    },
    stage1: {
      id: 'stage1',
      message: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —è —Å—Ç–æ—é —É –±–∞—Ä–∞. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å –ø–µ—Ä–≤—ã–º?',
      options: [
        {
          text: '–ü—Ä–∏–≤–µ—Ç, –º–æ–∂–Ω–æ —É–≥–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è —á–µ–º-—Ç–æ?',
          emoji: 'üç∏',
          response: {
            text: '–ö–ª–∞—Å—Å–∏–∫–∞! –°–∫—Ä–æ–º–Ω–æ, –Ω–æ —Å–æ –≤–∫—É—Å–æ–º üç∏ 7/10',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –æ–ø–∞—Å–Ω–æ –∫—Ä–∞—Å–∏–≤–æ‚Ä¶',
          emoji: 'üî•',
          response: {
            text: '–û-–æ-–æ, –¥–µ—Ä–∑–∫–∏–π üòè –ê —á—Ç–æ –¥–∞–ª—å—à–µ?',
            type: 'good',
            score: 8
          }
        },
        {
          text: '–ù—É –ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞, –∫–∏—Å–∫–∞?',
          emoji: 'üò∫',
          response: {
            text: '–ö–∏—Å–∫–∞?.. –°–µ—Ä—å—ë–∑–Ω–æ? üôÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë üòÖ',
            type: 'bad',
            score: 3
          }
        }
      ],
      nextStage: 'stage2'
    },
    stage2: {
      id: 'stage2',
      message: '–û–∫–µ–π, —Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –º–µ–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. –ö—É–¥–∞ –≤–µ–¥—ë—à—å?',
      options: [
        {
          text: '–í —É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥',
          emoji: 'üåÜ',
          response: {
            text: '–†–æ–º–∞–Ω—Ç–∏–∫–∞ üòç –ê —Ç—ã –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç, –∫–∞–∫ –∫–∞–∂–µ—à—å—Å—è‚Ä¶',
            type: 'good',
            score: 8
          }
        },
        {
          text: '–í –∫–∞—Ä–∞–æ–∫–µ ‚Äî —Ä–∞–∑–æ—Ä–≤—ë–º –∑–∞–ª!',
          emoji: 'üé§',
          response: {
            text: '–û–±–æ–∂–∞—é —Å–º–µ–ª—ã—Ö! –ù–∞–¥–µ—é—Å—å, –ø–æ—ë—à—å –ª—É—á—à–µ, —á–µ–º –ø–∏—à–µ—à—å üòÑ',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–ö–æ –º–Ω–µ‚Ä¶ —Å–º–æ—Ç—Ä–µ—Ç—å Netflix üòâ',
          emoji: 'üì∫',
          response: {
            text: '–û—Ö, –º—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏, –∞ —Ç—ã —É–∂–µ —Å–ø–µ—à–∏—à—å üòâ',
            type: 'bad',
            score: 4
          }
        }
      ],
      nextStage: 'stage3'
    },
    stage3: {
      id: 'stage3',
      message: '–°–º–æ—Ç—Ä–∏, —è –¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –∑–∞–Ω—è—Ç–∞. –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—ë—à—å –º–æ—ë –≤–Ω–∏–º–∞–Ω–∏–µ?',
      options: [
        {
          text: '–£–ª—ã–±–Ω—É—Å—å –∏ –ø–æ–¥–æ–π–¥—É ‚Äî –ø—Ä–æ—Å—Ç–æ',
          emoji: 'üòä',
          response: {
            text: '–•–º–º, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ! –ù–æ —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ. 6/10',
            type: 'neutral',
            score: 6
          }
        },
        {
          text: '–°–¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ —Ç–æ–∂–µ –Ω–µ –∑–∞–º–µ—á–∞—é',
          emoji: 'üôà',
          response: {
            text: '–ò–≥—Ä–∞–µ—à—å –≤ –Ω–µ–¥–æ—Ç—Ä–æ–≥—É? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞! 7/10',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–ù–∞–ø–∏—à—É "—Ç—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞" –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É',
          emoji: '‚úèÔ∏è',
          response: {
            text: '–í–∞—É, —ç—Ç–æ –º–∏–ª–æ üòç –¢—ã —É–º–µ–µ—à—å —É–¥–∏–≤–∏—Ç—å! 9/10',
            type: 'good',
            score: 9
          }
        }
      ],
      nextStage: 'final'
    },
    final: {
      id: 'final',
      message: '–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ —Ñ–ª–∏—Ä—Ç–∞. –ü–æ—Ä–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏! üíã\n\n –í—Ä–µ–º—è –∏–¥—Ç–∏ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏!',
      options: [],
      nextStage: ''
    }
  },
  initialStage: 'welcome',
  finalStage: 'final'
};

const FlirtGame: React.FC = () => {
  const [showChat, setShowChat] = useState(false);
  const [currentStage, setCurrentStage] = useState<string>(gameScenario.initialStage);
  const [messages, setMessages] = useState<Array<{ text: string; sender: 'ellie' | 'system'; }>>([
    { text: gameScenario.stages[gameScenario.initialStage].message, sender: 'ellie' }
  ]);
  const [totalScore, setTotalScore] = useState<number>(0);
  const [showNextButton, setShowNextButton] = useState<boolean>(false);
  const [gameFinished, setGameFinished] = useState<boolean>(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { tg } = useTelegram();

  // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞, –æ–Ω–∏ —Ç–æ–ª—å–∫–æ –º–µ—à–∞—é—Ç
  useEffect(() => {
    if (currentStage === gameScenario.finalStage) {
      // Set a timeout to automatically show the final button after the message is displayed
      setTimeout(() => {
        setGameFinished(true);
      }, 1000);
    }
  }, [currentStage]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ–∫–Ω–∞ Telegram –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
  useEffect(() => {
    if (showChat && tg) {
      // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ Telegram WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      tg.expand();
    }
  }, [showChat, tg]);

  const handleOptionSelected = (option: Option) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedMessages = [...messages];
    updatedMessages.push({ text: option.text, sender: 'system' });
    
    // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≠–ª–ª–∏
    setTimeout(() => {
      const responseMessages = [...updatedMessages];
      responseMessages.push({ text: option.response.text, sender: 'ellie' });
      setMessages(responseMessages);
      
      // –ï—Å–ª–∏ —É –æ—Ç–≤–µ—Ç–∞ –µ—Å—Ç—å score, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
      if (option.response.score !== undefined) {
        setTotalScore(prev => prev + option.response.score!);
      }
      
      const stage = gameScenario.stages[currentStage];
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –∏ —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
      if (stage.nextStage && stage.nextStage !== gameScenario.finalStage) {
        setShowNextButton(true);
      } else if (stage.nextStage === gameScenario.finalStage) {
        // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
        setTimeout(() => {
          handleNextStage();
        }, 700);
      }
    }, 500);
  };

  const handleNextStage = () => {
    const stage = gameScenario.stages[currentStage];
    if (stage.nextStage) {
      setCurrentStage(stage.nextStage);
      const nextStage = gameScenario.stages[stage.nextStage];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
      setMessages(prev => [...prev, { text: nextStage.message, sender: 'ellie' }]);
      setShowNextButton(false);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø, —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameFinished –≤ true
      if (stage.nextStage === gameScenario.finalStage) {
        setTimeout(() => setGameFinished(true), 500);
      }
    }
  };

  const handleOfferClick = () => {
    if (tg) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ–π—Ç–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å—É
      tg.openLink('https://example.com/dating');
    }
  };

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–º–∞–∫—Å–∏–º—É–º 30 –æ—á–∫–æ–≤)
  const maxScore = 30;
  const progress = Math.min((totalScore / maxScore) * 100, 100);

  if (!showChat) {
    return <WelcomeScreen onStart={() => setShowChat(true)} />;
  }

  return (
    <div className="flex flex-col h-[100dvh] w-full relative overflow-hidden flex-shrink-0 flex-grow-0">
      {/* –ó–∞–±–ª—é—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω */}
      <div 
        className="absolute inset-0 bg-black/85 backdrop-blur-xl z-0"
      />
      
      {/* –®–∞–ø–∫–∞ —Å Ellie */}
      <div 
        className="bg-[rgba(30,30,40,0.9)] backdrop-blur-md p-3 flex items-center border-b border-white/10 fixed top-0 left-0 right-0 z-30 flex-shrink-0"
      >
        <div 
          className="flex items-center gap-2"
        >
          <div 
            className="w-8 h-8 rounded-full border border-white/20 bg-cover bg-center"
            style={{backgroundImage: 'url(/images/ellie.png)'}}
          />
          <div>
            <div 
              className="font-bold text-white text-sm flex items-center gap-1"
            >
              Ellie <span className="text-pink-300 text-xs"></span>
            </div>
            <div 
              className="text-[10px] text-white/60 flex items-center gap-1"
            >
              <span 
                className="w-1.5 h-1.5 bg-green-400 rounded-full inline-block"
              ></span>
              –û–Ω–ª–∞–π–Ω
            </div>
          </div>
        </div>
        
        <div 
          className="ml-auto text-white flex items-center gap-2"
        >
          <div 
            className="text-[10px] text-white"
          >
            –û—á–∫–∏: {totalScore}/{maxScore}
          </div>
          <div
            className="w-10 h-1 bg-white/20 rounded-sm overflow-hidden"
          >
            <div
              className="h-full bg-gradient-to-r from-indigo-600 to-purple-500"
              style={{width: `${progress}%`}}
            ></div>
          </div>
        </div>
      </div>
      
      {/* –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∞—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ */}
      <div className="flex flex-col h-full pt-14">
        {/* –°–æ–æ–±—â–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π */}
        <div className="p-3 overflow-y-auto" style={{ height: "calc(100vh - 180px)" }}>
          {messages.map((msg, index) => (
            <StyledMessage
              key={index}
              text={msg.text}
              sender={msg.sender}
              animate={index === messages.length - 1}
            />
          ))}
          <div ref={messagesEndRef} />
        </div>
        
        {/* –ù–∏–∂–Ω–∏–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É */}
        <div className="bg-[rgba(30,30,40,0.95)] backdrop-blur-md p-4 pb-6 border-t border-white/10 mt-auto">
          {showNextButton ? (
            <button
              onClick={handleNextStage}
              className="w-full py-3.5 bg-gradient-to-r from-indigo-600 to-purple-500 text-white border-none rounded-xl text-sm font-bold cursor-pointer shadow-lg transition-all duration-200"
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>
          ) : gameFinished ? (
            <button
              onClick={handleOfferClick}
              className="w-full py-3.5 bg-gradient-to-r from-indigo-600 to-purple-500 text-white border-none rounded-xl text-sm font-bold cursor-pointer shadow-lg transition-all duration-200"
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            </button>
          ) : (
            <div className="space-y-1.5">
              {gameScenario.stages[currentStage].options.map((option, index) => (
                <StyledOptionButton
                  key={index}
                  text={option.text}
                  emoji={option.emoji}
                  onClick={() => handleOptionSelected(option)}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FlirtGame; 