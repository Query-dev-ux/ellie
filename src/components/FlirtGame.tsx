import React, { useState, useEffect, useRef } from 'react';
import { useTelegram } from '../hooks/useTelegram';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
type Option = {
  text: string;
  emoji?: string;
  response: {
    text: string;
    type: 'good' | 'bad' | 'neutral';
    score?: number;
  };
};

type Stage = {
  id: string;
  message: string;
  options: Option[];
  nextStage?: string;
};

type GameScenario = {
  stages: { [key: string]: Stage };
  initialStage: string;
  finalStage: string;
};

// –ò–≥—Ä–æ–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
const gameScenario: GameScenario = {
  stages: {
    welcome: {
      id: 'welcome',
      message: '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Ellie. –£—á—É –ø–∞—Ä–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å üòò\n–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?',
      options: [
        {
          text: '–ù–∞—á–∞—Ç—å',
          response: {
            text: '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —É—Ä–æ–∫—É —Ñ–ª–∏—Ä—Ç–∞ üòè',
            type: 'good'
          }
        },
        {
          text: '–ù–µ —Å–µ–π—á–∞—Å',
          response: {
            text: '–ù—É —á—Ç–æ –∂, –±—É–¥—É –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ —Ä–µ—à–∏—à—å—Å—è üòâ',
            type: 'neutral'
          }
        }
      ],
      nextStage: 'stage1'
    },
    stage1: {
      id: 'stage1',
      message: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —è —Å—Ç–æ—é —É –±–∞—Ä–∞. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å –ø–µ—Ä–≤—ã–º?',
      options: [
        {
          text: '–ü—Ä–∏–≤–µ—Ç, –º–æ–∂–Ω–æ —É–≥–æ—Å—Ç–∏—Ç—å —Ç–µ–±—è —á–µ–º-—Ç–æ?',
          emoji: 'üç∏',
          response: {
            text: '–ö–ª–∞—Å—Å–∏–∫–∞! –°–∫—Ä–æ–º–Ω–æ, –Ω–æ —Å–æ –≤–∫—É—Å–æ–º üç∏ 7/10',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –æ–ø–∞—Å–Ω–æ –∫—Ä–∞—Å–∏–≤–æ‚Ä¶',
          emoji: 'üî•',
          response: {
            text: '–û-–æ-–æ, –¥–µ—Ä–∑–∫–∏–π üòè –ê —á—Ç–æ –¥–∞–ª—å—à–µ?',
            type: 'good',
            score: 8
          }
        },
        {
          text: '–ù—É –ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞, –∫–∏—Å–∫–∞?',
          emoji: 'üò∫',
          response: {
            text: '–ö–∏—Å–∫–∞?.. –°–µ—Ä—å—ë–∑–Ω–æ? üôÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë üòÖ',
            type: 'bad',
            score: 3
          }
        }
      ],
      nextStage: 'stage2'
    },
    stage2: {
      id: 'stage2',
      message: '–û–∫–µ–π, —Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª –º–µ–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ. –ö—É–¥–∞ –≤–µ–¥—ë—à—å?',
      options: [
        {
          text: '–í —É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥',
          emoji: 'üåÜ',
          response: {
            text: '–†–æ–º–∞–Ω—Ç–∏–∫–∞ üòç –ê —Ç—ã –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç, –∫–∞–∫ –∫–∞–∂–µ—à—å—Å—è‚Ä¶',
            type: 'good',
            score: 8
          }
        },
        {
          text: '–í –∫–∞—Ä–∞–æ–∫–µ ‚Äî —Ä–∞–∑–æ—Ä–≤—ë–º –∑–∞–ª!',
          emoji: 'üé§',
          response: {
            text: '–û–±–æ–∂–∞—é —Å–º–µ–ª—ã—Ö! –ù–∞–¥–µ—é—Å—å, –ø–æ—ë—à—å –ª—É—á—à–µ, —á–µ–º –ø–∏—à–µ—à—å üòÑ',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–ö–æ –º–Ω–µ‚Ä¶ —Å–º–æ—Ç—Ä–µ—Ç—å Netflix üòâ',
          emoji: 'üì∫',
          response: {
            text: '–û—Ö, –º—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏, –∞ —Ç—ã —É–∂–µ —Å–ø–µ—à–∏—à—å üòâ',
            type: 'bad',
            score: 4
          }
        }
      ],
      nextStage: 'stage3'
    },
    stage3: {
      id: 'stage3',
      message: '–°–º–æ—Ç—Ä–∏, —è –¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –∑–∞–Ω—è—Ç–∞. –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—ë—à—å –º–æ—ë –≤–Ω–∏–º–∞–Ω–∏–µ?',
      options: [
        {
          text: '–£–ª—ã–±–Ω—É—Å—å –∏ –ø–æ–¥–æ–π–¥—É ‚Äî –ø—Ä–æ—Å—Ç–æ',
          emoji: 'üòä',
          response: {
            text: '–•–º–º, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ! –ù–æ —Å–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω–æ. 6/10',
            type: 'neutral',
            score: 6
          }
        },
        {
          text: '–°–¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ —Ç–æ–∂–µ –Ω–µ –∑–∞–º–µ—á–∞—é',
          emoji: 'üôà',
          response: {
            text: '–ò–≥—Ä–∞–µ—à—å –≤ –Ω–µ–¥–æ—Ç—Ä–æ–≥—É? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞! 7/10',
            type: 'good',
            score: 7
          }
        },
        {
          text: '–ù–∞–ø–∏—à—É "—Ç—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞" –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É',
          emoji: '‚úèÔ∏è',
          response: {
            text: '–í–∞—É, —ç—Ç–æ –º–∏–ª–æ üòç –¢—ã —É–º–µ–µ—à—å —É–¥–∏–≤–∏—Ç—å! 9/10',
            type: 'good',
            score: 9
          }
        }
      ],
      nextStage: 'final'
    },
    final: {
      id: 'final',
      message: '–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ —Ñ–ª–∏—Ä—Ç–∞. –ü–æ—Ä–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏! üíã\n\n –í—Ä–µ–º—è –∏–¥—Ç–∏ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏!',
      options: [],
      nextStage: ''
    }
  },
  initialStage: 'welcome',
  finalStage: 'final'
};

// –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è WelcomeScreen
const WelcomeScreen: React.FC<{ onStart: () => void }> = ({ onStart }) => {
  return (
    <div className="flex flex-col h-screen w-full relative">
      {/* –ß–µ—Ä–Ω—ã–π –∑–∞–±–ª—é—Ä–µ–Ω–Ω—ã–π —Ñ–æ–Ω */}
      <div 
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.85)',
          backdropFilter: 'blur(30px)',
          zIndex: 0
        }}
      />
      
      {/* –û—Ç–¥–∞–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –¥–µ–≤—É—à–∫–∏ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏ */}
      <div 
        style={{
          position: 'absolute',
          top: '42%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: '85%',
          height: '70%',
          maxWidth: '400px',
          maxHeight: '550px',
          borderRadius: '24px',
          overflow: 'hidden',
          boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
          zIndex: 1
        }}
      >
        <div 
          style={{
            backgroundImage: 'url(/ellie2.png)',
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            width: '100%',
            height: '100%'
          }}
        />
      </div>
      
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ "Ellie" –Ω–∞–¥ —Ñ–æ—Ç–æ */}
      <div
        style={{
          position: 'absolute',
          top: '2%',
          left: '50%',
          transform: 'translateX(-50%)',
          zIndex: 3,
          backgroundColor: 'rgba(30,30,40,0.8)',
          backdropFilter: 'blur(15px)',
          padding: '10px 24px',
          borderRadius: '16px',
          boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
          border: '1px solid rgba(255,255,255,0.1)'
        }}
      >
        <p 
          style={{
            color: 'white',
            fontSize: '20px',
            fontWeight: 600,
            margin: 0,
            textAlign: 'center',
            textShadow: '0 0 4px rgba(255,255,255,0.4)'
          }}
        >
          <span style={{color: '#f9a8d4'}}>Ellie‚ú®</span>
        </p>
      </div>
      
      {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫ –≤–Ω–∏–∑—É —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏ */}
      <div 
        style={{
          position: 'absolute',
          bottom: '20px',
          left: '50%',
          transform: 'translateX(-50%)',
          width: '85%',
          maxWidth: '400px',
          backgroundColor: 'rgba(30,30,40,0.8)',
          backdropFilter: 'blur(15px)',
          padding: '20px',
          paddingBottom: '25px',
          zIndex: 2,
          boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
          borderRadius: '24px',
          border: '1px solid rgba(255,255,255,0.1)'
        }}
      >
        <p 
          style={{
            color: 'white',
            fontSize: '18px',
            fontWeight: 500,
            marginBottom: '16px',
            textShadow: '0 0 4px rgba(255,255,255,0.4)'
          }}
        >
          –¢–≤–æ—è <span style={{color: '#f9a8d4'}}>AI-–ø–æ–¥—Ä—É–≥–∞</span>: —É–º–Ω–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è –∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏
        </p>
        
        <button 
          onClick={onStart}
          style={{
            width: '100%',
            padding: '16px',
            background: 'linear-gradient(to right, #4f46e5, #8b5cf6)',
            color: 'white',
            border: 'none',
            borderRadius: '16px',
            fontSize: '16px',
            fontWeight: 'bold',
            cursor: 'pointer',
            boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
            transition: 'all 0.2s'
          }}
        >
          –ù–∞—á–∞—Ç—å —á–∞—Ç
        </button>
      </div>
    </div>
  );
};

// –°—Ç–∏–ª–∏–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Message –¥–ª—è —á–∞—Ç–∞
const StyledMessage: React.FC<{
  text: string;
  sender: 'ellie' | 'system';
  animate?: boolean;
}> = ({ text, sender, animate = false }) => {
  return (
    <div 
      className={`flex ${sender === 'ellie' ? 'justify-start' : 'justify-end'}`}
      style={{
        marginBottom: '24px' // –£–≤–µ–ª–∏—á–∏–≤–∞—é –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      }}
    >
      {sender === 'ellie' && (
        <div className="mr-2 self-start mt-1">
          <div 
            style={{
              width: '36px',
              height: '36px',
              borderRadius: '50%',
              border: '1px solid rgba(255,255,255,0.2)',
              backgroundImage: 'url(/ellie2.png)',
              backgroundSize: 'cover',
              backgroundPosition: 'center'
            }}
          />
        </div>
      )}
      
      <div
        style={{
          backgroundColor: sender === 'ellie' ? 'rgba(79, 70, 229, 0.7)' : 'rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(8px)',
          color: 'white',
          borderRadius: sender === 'ellie' ? '0px 20px 20px 20px' : '20px 0px 20px 20px',
          padding: '12px 16px',
          maxWidth: '75%', // –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
          boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
          border: '1px solid rgba(255,255,255,0.1)',
          animation: animate ? 'fadeIn 0.3s ease-out' : 'none',
          fontSize: '15px',
          lineHeight: '1.5'
        }}
      >
        {text.split('\n').map((line, i) => (
          <div key={i} style={{marginBottom: i < text.split('\n').length - 1 ? '8px' : '0'}}>
            {line}
          </div>
        ))}
      </div>
    </div>
  );
};

// –°—Ç–∏–ª–∏–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç OptionButton
const StyledOptionButton: React.FC<{
  text: string;
  onClick: () => void;
  emoji?: string;
}> = ({ text, onClick, emoji }) => (
  <button 
    onClick={onClick}
    style={{
      width: '100%',
      marginBottom: '10px',
      padding: '14px',
      background: 'rgba(255,255,255,0.08)',
      borderRadius: '16px',
      border: '1px solid rgba(255,255,255,0.1)',
      color: 'white',
      textAlign: 'left',
      display: 'flex',
      alignItems: 'center',
      transition: 'all 0.2s',
      cursor: 'pointer'
    }}
  >
    {emoji && <span style={{marginRight: '10px', fontSize: '20px'}}>{emoji}</span>}
    <span>{text}</span>
  </button>
);

const FlirtGame: React.FC = () => {
  const [showChat, setShowChat] = useState(false);
  const [currentStage, setCurrentStage] = useState<string>(gameScenario.initialStage);
  const [messages, setMessages] = useState<Array<{ text: string; sender: 'ellie' | 'system'; }>>([
    { text: gameScenario.stages[gameScenario.initialStage].message, sender: 'ellie' }
  ]);
  const [totalScore, setTotalScore] = useState<number>(0);
  const [showNextButton, setShowNextButton] = useState<boolean>(false);
  const [gameFinished, setGameFinished] = useState<boolean>(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { tg } = useTelegram();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  useEffect(() => {
    if (currentStage === gameScenario.finalStage) {
      // Set a timeout to automatically show the final button after the message is displayed
      setTimeout(() => {
        setGameFinished(true);
      }, 1000);
    }
  }, [currentStage]);

  const handleOptionSelected = (option: Option) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedMessages = [...messages];
    updatedMessages.push({ text: option.text, sender: 'system' });
    
    // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≠–ª–ª–∏
    setTimeout(() => {
      const responseMessages = [...updatedMessages];
      responseMessages.push({ text: option.response.text, sender: 'ellie' });
      setMessages(responseMessages);
      
      // –ï—Å–ª–∏ —É –æ—Ç–≤–µ—Ç–∞ –µ—Å—Ç—å score, –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
      if (option.response.score !== undefined) {
        setTotalScore(prev => prev + option.response.score!);
      }
      
      const stage = gameScenario.stages[currentStage];
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –∏ —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
      if (stage.nextStage && stage.nextStage !== gameScenario.finalStage) {
        setShowNextButton(true);
      } else if (stage.nextStage === gameScenario.finalStage) {
        // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
        setTimeout(() => {
          handleNextStage();
        }, 700);
      }
    }, 500);
  };

  const handleNextStage = () => {
    const stage = gameScenario.stages[currentStage];
    if (stage.nextStage) {
      setCurrentStage(stage.nextStage);
      const nextStage = gameScenario.stages[stage.nextStage];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
      setMessages(prev => [...prev, { text: nextStage.message, sender: 'ellie' }]);
      setShowNextButton(false);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø, —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameFinished –≤ true
      if (stage.nextStage === gameScenario.finalStage) {
        setTimeout(() => setGameFinished(true), 500);
      }
    }
  };

  const handleOfferClick = () => {
    if (tg) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ–π—Ç–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å—É
      tg.openLink('https://example.com/dating');
    }
  };

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (–º–∞–∫—Å–∏–º—É–º 30 –æ—á–∫–æ–≤)
  const maxScore = 30;
  const progress = Math.min((totalScore / maxScore) * 100, 100);

  if (!showChat) {
    return <WelcomeScreen onStart={() => setShowChat(true)} />;
  }

  return (
    <div className="flex flex-col h-screen w-full relative">
      {/* –ó–∞–±–ª—é—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω */}
      <div 
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.85)',
          backdropFilter: 'blur(30px)',
          zIndex: 0
        }}
      />
      
      {/* –®–∞–ø–∫–∞ —Å Ellie */}
      <div 
        style={{
          backgroundColor: 'rgba(30,30,40,0.8)',
          backdropFilter: 'blur(15px)',
          padding: '10px 16px',
          display: 'flex',
          alignItems: 'center',
          borderBottom: '1px solid rgba(255,255,255,0.1)',
          position: 'relative',
          zIndex: 1
        }}
      >
        <div 
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '10px'
          }}
        >
          <div 
            style={{
              width: '42px',
              height: '42px',
              borderRadius: '50%',
              border: '1px solid rgba(255,255,255,0.2)',
              backgroundImage: 'url(/ellie2.png)',
              backgroundSize: 'cover',
              backgroundPosition: 'center'
            }}
          />
          <div>
            <div 
              style={{
                fontWeight: 'bold',
                color: 'white',
                display: 'flex',
                alignItems: 'center',
                gap: '5px'
              }}
            >
              Ellie <span style={{color: '#f9a8d4', fontSize: '14px'}}></span>
            </div>
            <div 
              style={{
                fontSize: '12px',
                color: 'rgba(255,255,255,0.6)',
                display: 'flex',
                alignItems: 'center',
                gap: '4px'
              }}
            >
              <span 
                style={{
                  width: '8px',
                  height: '8px',
                  backgroundColor: '#4ade80',
                  borderRadius: '50%',
                  display: 'inline-block'
                }}
              ></span>
              –û–Ω–ª–∞–π–Ω
            </div>
          </div>
        </div>
        
        <div 
          style={{
            marginLeft: 'auto',
            color: 'white',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}
        >
          <div 
            style={{
              fontSize: '12px',
              color: 'white'
            }}
          >
            –û—á–∫–∏ —Ñ–ª–∏—Ä—Ç–∞: {totalScore}/{maxScore}
          </div>
          <div
            style={{
              width: '50px',
              height: '4px',
              backgroundColor: 'rgba(255,255,255,0.2)',
              borderRadius: '2px',
              overflow: 'hidden'
            }}
          >
            <div
              style={{
                height: '100%',
                width: `${progress}%`,
                background: 'linear-gradient(to right, #4f46e5, #8b5cf6)'
              }}
            ></div>
          </div>
        </div>
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div 
        style={{
          flex: 1,
          overflowY: 'auto',
          padding: '16px',
          position: 'relative',
          zIndex: 1
        }}
      >
        {messages.map((msg, index) => (
          <StyledMessage
            key={index}
            text={msg.text}
            sender={msg.sender}
            animate={index === messages.length - 1}
          />
        ))}
        <div ref={messagesEndRef} />
      </div>
      
      {/* –ù–∏–∂–Ω–∏–π –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <div 
        style={{
          backgroundColor: 'rgba(30,30,40,0.8)',
          backdropFilter: 'blur(15px)',
          padding: '16px',
          borderTop: '1px solid rgba(255,255,255,0.1)',
          position: 'relative',
          zIndex: 1
        }}
      >
        {showNextButton ? (
          <button
            onClick={handleNextStage}
            style={{
              width: '100%',
              padding: '16px',
              background: 'linear-gradient(to right, #4f46e5, #8b5cf6)',
              color: 'white',
              border: 'none',
              borderRadius: '16px',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: 'pointer',
              boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
              transition: 'all 0.2s'
            }}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </button>
        ) : gameFinished ? (
          <button
            onClick={handleOfferClick}
            style={{
              width: '100%',
              padding: '16px',
              background: 'linear-gradient(to right, #4f46e5, #8b5cf6)',
              color: 'white',
              border: 'none',
              borderRadius: '16px',
              fontSize: '16px',
              fontWeight: 'bold',
              cursor: 'pointer',
              boxShadow: '0 4px 10px rgba(0,0,0,0.3)',
              transition: 'all 0.2s'
            }}
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
          </button>
        ) : (
          <div>
            {gameScenario.stages[currentStage].options.map((option, index) => (
              <StyledOptionButton
                key={index}
                text={option.text}
                emoji={option.emoji}
                onClick={() => handleOptionSelected(option)}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default FlirtGame; 